on:
  workflow_call:
    inputs:
      gcovr-version:
        type: string
        description: gcovr version
        required: false
        default: "7.2"
      report-dir:
        type: string
        description: Coverage report output directory
        required: false
        default: report
jobs:
  collect:
    runs-on: ${{ matrix.config.image }}
    strategy:
      fail-fast: false
      matrix:
        cxx-std: [11, 20]
        config:
          - { image: macos-14,     toolchain: llvm,               compiler-name: clang,   cc: clang,    cxx: clang++,    gcov: llvm-cov gcov,    gen: Xcode, shell: bash }
          - { image: ubuntu-22.04, toolchain: llvm,               compiler-name: clang15, cc: clang-15, cxx: clang++-15, gcov: llvm-cov-15 gcov, gen: Ninja, shell: bash,        apt: "clang-15 clang++-15" }
          - { image: ubuntu-22.04, toolchain: gnu,                compiler-name: gcc12,   cc: gcc-12,   cxx: g++-12,     gcov: gcov-12,          gen: Ninja, shell: bash,        apt: "gcc-12 g++-12" }
          - { image: windows-2022, toolchain: msys2-gnu-ucrt64,   compiler-name: gcc,     cc: gcc,      cxx: g++,        gcov: gcov,             gen: Ninja, shell: "msys2 {0}", msys: UCRT64 }
          - { image: windows-2022, toolchain: msys2-llvm-clang64, compiler-name: clang,   cc: clang,    cxx: clang++,    gcov: llvm-cov gcov,    gen: Ninja, shell: "msys2 {0}", msys: CLANG64 }
    defaults:
      run:
        shell: ${{ matrix.config.shell }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up environment
        uses: ./.github/workflows/setup-env
        with:
          apt: ${{ matrix.config.apt }}
          msys: ${{ matrix.config.msys }}

      - name: Build and run tests with coverage
        run: >
          ctest --build-and-test . build
          --build-generator "${{ matrix.config.gen }}"
          --build-config Profile
          --test-command ctest
          --output-on-failure
          --build-options
          "CMAKE_C_COMPILER=${{ matrix.config.cc }}"
          "CMAKE_CXX_COMPILER=${{ matrix.config.cxx }}"
          "CMAKE_CXX_STANDARD=${{ matrix.cxx-std }}"

      - name: Install gcovr
        run: pip install "gcovr==${{ inputs.gcovr-version }}"

      - name: Prepare test coverage artifacts
        id: prepare-test-coverage-artifacts
        run: |
          coverage_name="${{ matrix.config.image }}_${{ matrix.config.toolchain }}_${{ matrix.config.compiler-name }}"
          base_dir="temp_${RANDOM}"
          artifact_dir="${base_dir}/${coverage_name}"

          gcovr_args=(--filter include/ --json "${artifact_dir}/coverage.json")
          if [[ ! -z "${{ inputs.gcov }}" ]]; then
            gcovr_args+=(--gcov-executable "${{ inputs.gcov }}")
          fi

          mkdir -p "${artifact_dir}"
          gcovr "${gcovr_args[@]}"

          echo "upload-dir=${base_dir}" >> "${GITHUB_OUTPUT}"

      - name: Get matrix hash
        id: matrix-hash
        uses: actions/github-script@v7
        env:
          MATRIX: ${{ toJSON(matrix) }}
        with:
          script: return require("crypto").createHash("sha256").update(process.env.MATRIX, "utf8").digest("hex")
          result-encoding: string

      - name: Upload test coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test_coverage_${{ steps.matrix-hash.outputs.result }}
          path: ${{ steps.prepare-test-coverage-artifacts.outputs.upload-dir }}
          retention-days: 1
          if-no-files-found: error

  report:
    needs: collect
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python
        run: >
          sudo apt-get install --no-install-recommends -y
          python3
          python3-lxml
          python3-pip

      - name: Install gcovr
        run: pip install "gcovr==${{ inputs.gcovr-version }}"

      - name: Merge test coverage artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: test_coverage
          pattern: test_coverage_*
          delete-merged: true

      - name: Download test coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: test_coverage

      - name: Generate report
        run: |
          tracefile_args=()
          while read f; do
            tracefile_args+=(--add-tracefile "${f}")
          done <<< "$(find . -type f -name "coverage.json")"
          mkdir -p "${{ inputs.report-dir }}/html"
          gcovr --json "${{ inputs.report-dir }}/gcovr.json" "${tracefile_args[@]}"
          gcovr --coveralls "${{ inputs.report-dir }}/coveralls.json" --add-tracefile "${{ inputs.report-dir }}/gcovr.json"
          gcovr --json-summary "${{ inputs.report-dir }}/summary.json" --add-tracefile "${{ inputs.report-dir }}/gcovr.json"
          gcovr --html-details "${{ inputs.report-dir }}/html/index.html" --add-tracefile "${{ inputs.report-dir }}/gcovr.json"

      - name: Upload report artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test_coverage_report
          path: ${{ inputs.report-dir }}
          retention-days: 1
          if-no-files-found: error

      - name: Add report to CI job summary
        uses: actions/github-script@v7
        with:
          script: |
            const numberOr = (value, alternative) => Number.isNaN(value = parseInt(value)) ? alternative : value;
            const percentValue = (value, percentSymbol = "%") => numberOr(value, "-") + percentSymbol;
            const data = require("./${{ inputs.report-dir }}/summary.json");
            await core.summary
              .addHeading("Test Coverage Summary")
              .addTable([
                [
                  { data: "Lines", header: true },
                  { data: "Functions", header: true },
                  { data: "Branches", header: true }
                ],
                [
                  `${percentValue(data.line_percent)} ${data.line_covered}/${data.line_total}`,
                  `${percentValue(data.function_percent)} ${data.function_covered}/${data.function_total}`,
                  `${percentValue(data.branch_percent)} ${data.branch_covered}/${data.branch_total}`
                ]
              ])
              .addTable([
                [
                  { data: "File", header: true },
                  { data: "Lines", header: true },
                  { data: "Functions", header: true },
                  { data: "Branches", header: true }
                ],
                ...data.files.map(file => [
                  file.filename,
                  `${percentValue(file.line_percent)} ${file.line_covered}/${file.line_total}`,
                  `${percentValue(file.function_percent)} ${file.function_covered}/${file.function_total}`,
                  `${percentValue(file.branch_percent)} ${file.branch_covered}/${file.branch_total}`
                ])
              ])
              .write();

  #    - name: Upload test coverage to codecov
  #      uses: codecov/codecov-action@v4
  #      with:
  #        files: ${{ inputs.report-dir }}/coveralls.json
